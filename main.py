import os
import logging
import asyncio
from typing import Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, 
    PreCheckoutQuery, 
    SuccessfulPayment, 
    LabeledPrice,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STARS_AMOUNT = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –æ–ø–ª–∞—Ç—ã
PRODUCT_TITLE = "–ü—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç"
PRODUCT_DESCRIPTION = "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ 30 –¥–Ω–µ–π"
PAYLOAD = "premium_subscription_001"

class PaymentBot:
    def __init__(self):
        self.bot = bot
        self.dp = dp
        self.setup_handlers()
    
    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.help_command, Command("help"))
        self.dp.message.register(self.buy_command, Command("buy"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        self.dp.pre_checkout_query.register(self.pre_checkout_handler)
        self.dp.message.register(self.successful_payment_handler, F.successful_payment)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.buy_callback_handler, F.data == "buy_premium")
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            welcome_text = (
                "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stars Payment Bot! üåü\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram Stars.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ Stars.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/buy - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåü –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium")]
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –°–ø—Ä–∞–≤–∫–∞\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Stars.\n\n"
            "üåü –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy\n"
            "2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram\n"
            "3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
            "üí° –í–∞–∂–Ω–æ: —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –Ω–∞ –±–∞–ª–∞–Ω—Å–µ."
        )
        await message.answer(help_text)
    
    async def buy_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /buy"""
        await self.create_invoice(message)
    
    async def buy_callback_handler(self, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏"""
        try:
            await self.create_invoice(callback_query.message)
            await callback_query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ buy callback: {e}")
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç", show_alert=True)
    
    async def create_invoice(self, message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        try:
            prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞", amount=STARS_AMOUNT)]
            
            await self.bot.send_invoice(
                chat_id=message.chat.id,
                title=PRODUCT_TITLE,
                description=PRODUCT_DESCRIPTION,
                payload=PAYLOAD,
                provider_token="",  # –î–ª—è Stars —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
                currency="XTR",     # –ö–æ–¥ –≤–∞–ª—é—Ç—ã Telegram Stars
                prices=prices,
                start_parameter="premium_subscription",
                need_name=False,
                need_phone_number=False,
                need_email=False,
                need_shipping_address=False,
                is_flexible=False,
                disable_notification=False,
                protect_content=False,
                request_timeout=15
            )
            
            logger.info(f"–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ create_invoice: {e}")
            await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except TelegramNetworkError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ create_invoice: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ create_invoice: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def pre_checkout_handler(self, pre_checkout_query: PreCheckoutQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
        try:
            if pre_checkout_query.invoice_payload != PAYLOAD:
                await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞")
                return
            
            await pre_checkout_query.answer(ok=True)
            logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout_handler: {e}")
            await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    
    async def successful_payment_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment: SuccessfulPayment = message.successful_payment
            
            success_text = (
                "üéâ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω! üéâ\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                f"–°—É–º–º–∞: {payment.total_amount} Stars\n"
                f"–ü—Ä–æ–¥—É–∫—Ç: {PRODUCT_TITLE}\n\n"
                "–í–∞—à –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!\n"
                "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üöÄ"
            )
            
            await message.answer(success_text)
            
            logger.info(
                f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}, "
                f"–°—É–º–º–∞: {payment.total_amount} Stars, "
                f"Payload: {payment.invoice_payload}"
            )
            
            admin_id = os.getenv('ADMIN_ID')
            if admin_id:
                admin_notification = (
                    f"üí∞ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                    f"–°—É–º–º–∞: {payment.total_amount} Stars\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
                )
                await self.bot.send_message(chat_id=admin_id, text=admin_notification)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω! –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Stars Payment Bot...")
            await self.bot.delete_webhook(drop_pending_updates=True)
            await self.dp.start_polling(self.bot, allowed_updates=dp.resolve_used_update_types())
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        finally:
            await self.bot.session.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not os.getenv('BOT_TOKEN'):
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        return
    
    payment_bot = PaymentBot()
    await payment_bot.run()

if __name__ == "__main__":
    asyncio.run(main())
